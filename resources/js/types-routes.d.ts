// This file is auto generated by TypescriptableLaravel.
declare namespace App {
  declare namespace Route {
    'login' | 'logout' | 'password.email' | 'password.reset' | 'password.update' | 'register' | 'user-profile-information.update' | 'user-password.update' | 'password.confirm' | 'password.confirmation' | 'two-factor-challenge' | 'two-factor.disable' | 'two-factor.confirm' | 'two-factor.qr-code' | 'two-factor.secret-key' | 'user/two-factor-recovery-codes' | 'profile.show' | 'other-browser-sessions.destroy' | 'current-user-photo.destroy' | 'current-user.destroy' | 'sanctum.csrf-cookie' | 'log-viewer.hosts' | 'log-viewer.folders' | 'log-viewer.folders.download' | 'log-viewer.folders.clear-cache' | 'log-viewer.folders.delete' | 'log-viewer.files' | 'log-viewer.files.download' | 'log-viewer.files.clear-cache' | 'log-viewer.files.delete' | 'log-viewer.files.clear-cache-all' | 'log-viewer.files.delete-multiple-files' | 'log-viewer.logs' | 'log-viewer.index' | '/' | 'dashboard'
    export type Name = 'login' | 'logout' | 'password.email' | 'password.reset' | 'password.update' | 'register' | 'user-profile-information.update' | 'user-password.update' | 'password.confirm' | 'password.confirmation' | 'two-factor-challenge' | 'two-factor.disable' | 'two-factor.confirm' | 'two-factor.qr-code' | 'two-factor.secret-key' | 'user/two-factor-recovery-codes' | 'profile.show' | 'other-browser-sessions.destroy' | 'current-user-photo.destroy' | 'current-user.destroy' | 'sanctum.csrf-cookie' | 'log-viewer.hosts' | 'log-viewer.folders' | 'log-viewer.folders.download' | 'log-viewer.folders.clear-cache' | 'log-viewer.folders.delete' | 'log-viewer.files' | 'log-viewer.files.download' | 'log-viewer.files.clear-cache' | 'log-viewer.files.delete' | 'log-viewer.files.clear-cache-all' | 'log-viewer.files.delete-multiple-files' | 'log-viewer.logs' | 'log-viewer.index' | '/' | 'dashboard'
    export type Path = '/login' | '/logout' | '/forgot-password' | '/reset-password/{token}' | '/reset-password' | '/register' | '/user/profile-information' | '/user/password' | '/user/confirm-password' | '/user/confirmed-password-status' | '/two-factor-challenge' | '/user/two-factor-authentication' | '/user/confirmed-two-factor-authentication' | '/user/two-factor-qr-code' | '/user/two-factor-secret-key' | '/user/two-factor-recovery-codes' | '/user/profile' | '/user/other-browser-sessions' | '/user/profile-photo' | '/user' | '/sanctum/csrf-cookie' | '/log-viewer/api/hosts' | '/log-viewer/api/folders' | '/log-viewer/api/folders/{folderIdentifier}/download' | '/log-viewer/api/folders/{folderIdentifier}/clear-cache' | '/log-viewer/api/folders/{folderIdentifier}' | '/log-viewer/api/files' | '/log-viewer/api/files/{fileIdentifier}/download' | '/log-viewer/api/files/{fileIdentifier}/clear-cache' | '/log-viewer/api/files/{fileIdentifier}' | '/log-viewer/api/clear-cache-all' | '/log-viewer/api/delete-multiple-files' | '/log-viewer/api/logs' | '/log-viewer/{view?}' | '/' | '/dashboard';
    export type Params = {
      'login': never,
      'logout': never,
      'password.email': never,
      'password.reset': {
        'token'?: App.Route.Param
      },
      'password.update': never,
      'register': never,
      'user-profile-information.update': never,
      'user-password.update': never,
      'password.confirm': never,
      'password.confirmation': never,
      'two-factor-challenge': never,
      'two-factor.disable': never,
      'two-factor.confirm': never,
      'two-factor.qr-code': never,
      'two-factor.secret-key': never,
      'user/two-factor-recovery-codes': never,
      'profile.show': never,
      'other-browser-sessions.destroy': never,
      'current-user-photo.destroy': never,
      'current-user.destroy': never,
      'sanctum.csrf-cookie': never,
      'log-viewer.hosts': never,
      'log-viewer.folders': never,
      'log-viewer.folders.download': {
        'folderIdentifier'?: App.Route.Param
      },
      'log-viewer.folders.clear-cache': {
        'folderIdentifier'?: App.Route.Param
      },
      'log-viewer.folders.delete': {
        'folderIdentifier'?: App.Route.Param
      },
      'log-viewer.files': never,
      'log-viewer.files.download': {
        'fileIdentifier'?: App.Route.Param
      },
      'log-viewer.files.clear-cache': {
        'fileIdentifier'?: App.Route.Param
      },
      'log-viewer.files.delete': {
        'fileIdentifier'?: App.Route.Param
      },
      'log-viewer.files.clear-cache-all': never,
      'log-viewer.files.delete-multiple-files': never,
      'log-viewer.logs': never,
      'log-viewer.index': {
        'view'?: App.Route.Param
      },
      '/': never,
      'dashboard': never
    };

    export type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
    export interface Entity { name: App.Route.Name; path: App.Route.Path; params?: App.Route.Params[Route.Name],  method: App.Route.Method; }

    declare namespace Typed {
      type LoginPOST = {
        name: 'login',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogoutPOST = {
        name: 'logout',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type ForgotPasswordPOST = {
        name: 'password.email',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type ResetPasswordTokenGET = {
        name: 'password.reset',
        params: {
          token: App.Route.Param,
        },
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type ResetPasswordPOST = {
        name: 'password.update',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type RegisterPOST = {
        name: 'register',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserProfileInformationPUT = {
        name: 'user-profile-information.update',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserPasswordPUT = {
        name: 'user-password.update',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserConfirmPasswordPOST = {
        name: 'password.confirm',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserConfirmedPasswordStatusGET = {
        name: 'password.confirmation',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type TwoFactorChallengePOST = {
        name: 'two-factor-challenge',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorAuthenticationDELETE = {
        name: 'two-factor.disable',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserConfirmedTwoFactorAuthenticationPOST = {
        name: 'two-factor.confirm',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorQrCodeGET = {
        name: 'two-factor.qr-code',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorSecretKeyGET = {
        name: 'two-factor.secret-key',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorRecoveryCodesPOST = {
        name: 'user/two-factor-recovery-codes',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserProfileGET = {
        name: 'profile.show',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserOtherBrowserSessionsDELETE = {
        name: 'other-browser-sessions.destroy',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserProfilePhotoDELETE = {
        name: 'current-user-photo.destroy',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserDELETE = {
        name: 'current-user.destroy',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type SanctumCsrfCookieGET = {
        name: 'sanctum.csrf-cookie',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiHostsGET = {
        name: 'log-viewer.hosts',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiFoldersGET = {
        name: 'log-viewer.folders',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiFoldersFolderIdentifierDownloadGET = {
        name: 'log-viewer.folders.download',
        params: {
          folderIdentifier: App.Route.Param,
        },
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiFoldersFolderIdentifierClearCachePOST = {
        name: 'log-viewer.folders.clear-cache',
        params: {
          folderIdentifier: App.Route.Param,
        },
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiFoldersFolderIdentifierDELETE = {
        name: 'log-viewer.folders.delete',
        params: {
          folderIdentifier: App.Route.Param,
        },
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiFilesGET = {
        name: 'log-viewer.files',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiFilesFileIdentifierDownloadGET = {
        name: 'log-viewer.files.download',
        params: {
          fileIdentifier: App.Route.Param,
        },
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiFilesFileIdentifierClearCachePOST = {
        name: 'log-viewer.files.clear-cache',
        params: {
          fileIdentifier: App.Route.Param,
        },
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiFilesFileIdentifierDELETE = {
        name: 'log-viewer.files.delete',
        params: {
          fileIdentifier: App.Route.Param,
        },
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiClearCacheAllPOST = {
        name: 'log-viewer.files.clear-cache-all',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiDeleteMultipleFilesPOST = {
        name: 'log-viewer.files.delete-multiple-files',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerApiLogsGET = {
        name: 'log-viewer.logs',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogViewerViewGET = {
        name: 'log-viewer.index',
        params: {
          view?: App.Route.Param,
        },
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type GET = {
        name: '/',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type DashboardGET = {
        name: 'dashboard',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      }
    }
    export type Param = string | number | boolean | undefined
    export type Type = App.Route.Typed.LoginPOST | App.Route.Typed.LogoutPOST | App.Route.Typed.ForgotPasswordPOST | App.Route.Typed.ResetPasswordTokenGET | App.Route.Typed.ResetPasswordPOST | App.Route.Typed.RegisterPOST | App.Route.Typed.UserProfileInformationPUT | App.Route.Typed.UserPasswordPUT | App.Route.Typed.UserConfirmPasswordPOST | App.Route.Typed.UserConfirmedPasswordStatusGET | App.Route.Typed.TwoFactorChallengePOST | App.Route.Typed.UserTwoFactorAuthenticationDELETE | App.Route.Typed.UserConfirmedTwoFactorAuthenticationPOST | App.Route.Typed.UserTwoFactorQrCodeGET | App.Route.Typed.UserTwoFactorSecretKeyGET | App.Route.Typed.UserTwoFactorRecoveryCodesPOST | App.Route.Typed.UserProfileGET | App.Route.Typed.UserOtherBrowserSessionsDELETE | App.Route.Typed.UserProfilePhotoDELETE | App.Route.Typed.UserDELETE | App.Route.Typed.SanctumCsrfCookieGET | App.Route.Typed.LogViewerApiHostsGET | App.Route.Typed.LogViewerApiFoldersGET | App.Route.Typed.LogViewerApiFoldersFolderIdentifierDownloadGET | App.Route.Typed.LogViewerApiFoldersFolderIdentifierClearCachePOST | App.Route.Typed.LogViewerApiFoldersFolderIdentifierDELETE | App.Route.Typed.LogViewerApiFilesGET | App.Route.Typed.LogViewerApiFilesFileIdentifierDownloadGET | App.Route.Typed.LogViewerApiFilesFileIdentifierClearCachePOST | App.Route.Typed.LogViewerApiFilesFileIdentifierDELETE | App.Route.Typed.LogViewerApiClearCacheAllPOST | App.Route.Typed.LogViewerApiDeleteMultipleFilesPOST | App.Route.Typed.LogViewerApiLogsGET | App.Route.Typed.LogViewerViewGET | App.Route.Typed.GET | App.Route.Typed.DashboardGET
    export type TypeGet = App.Route.Typed.ResetPasswordTokenGET | App.Route.Typed.UserConfirmedPasswordStatusGET | App.Route.Typed.UserTwoFactorQrCodeGET | App.Route.Typed.UserTwoFactorSecretKeyGET | App.Route.Typed.UserProfileGET | App.Route.Typed.SanctumCsrfCookieGET | App.Route.Typed.LogViewerApiHostsGET | App.Route.Typed.LogViewerApiFoldersGET | App.Route.Typed.LogViewerApiFoldersFolderIdentifierDownloadGET | App.Route.Typed.LogViewerApiFilesGET | App.Route.Typed.LogViewerApiFilesFileIdentifierDownloadGET | App.Route.Typed.LogViewerApiLogsGET | App.Route.Typed.LogViewerViewGET | App.Route.Typed.GET | App.Route.Typed.DashboardGET
    export type TypePost = App.Route.Typed.LoginPOST | App.Route.Typed.LogoutPOST | App.Route.Typed.ForgotPasswordPOST | App.Route.Typed.ResetPasswordPOST | App.Route.Typed.RegisterPOST | App.Route.Typed.UserConfirmPasswordPOST | App.Route.Typed.TwoFactorChallengePOST | App.Route.Typed.UserConfirmedTwoFactorAuthenticationPOST | App.Route.Typed.UserTwoFactorRecoveryCodesPOST | App.Route.Typed.LogViewerApiFoldersFolderIdentifierClearCachePOST | App.Route.Typed.LogViewerApiFilesFileIdentifierClearCachePOST | App.Route.Typed.LogViewerApiClearCacheAllPOST | App.Route.Typed.LogViewerApiDeleteMultipleFilesPOST
    export type TypePut = App.Route.Typed.UserProfileInformationPUT | App.Route.Typed.UserPasswordPUT
    export type TypePatch = never
    export type TypeDelete = App.Route.Typed.UserTwoFactorAuthenticationDELETE | App.Route.Typed.UserOtherBrowserSessionsDELETE | App.Route.Typed.UserProfilePhotoDELETE | App.Route.Typed.UserDELETE | App.Route.Typed.LogViewerApiFoldersFolderIdentifierDELETE | App.Route.Typed.LogViewerApiFilesFileIdentifierDELETE
  }
}